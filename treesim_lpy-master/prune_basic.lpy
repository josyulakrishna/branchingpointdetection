import random as rd
from numpy import arange
from random import uniform, seed
from math import pi

from helper import *


#Setup variables
prune = False
label = False

#Tree growth variables
#Trunk guide variables
L0 = 50
freq = 30

radius = 1
with_2_branch = True
radinc =    0.005 # increment of radius through time

#Prune at end of specified iteration according to pruning_strategy
def EndEach(lstring):
  global prune
  frameDisplay(True)
  if not prune:
    return lstring
  return pruning_strategy(getIterationNb(), lstring)
  
 

#LSystem starts

module A # represent trunk apical meristem
module B # represent apical meristem of lateral branches
module I # Internode



Axiom: A(1,0)
derivation length: 42
production:
A(t,o) :
  if t < 42: #Max trunk length
     # simply produces a metamer and ages the apex
     if label:
       nproduce SetColor(3)
     nproduce  SetGuide(gen_noise_branch(radius/100.,15),L0)I(1,0.05)
     if t%1 == 0:
       if label:
       	nproduce SetColor(2)
       nproduce [/(myrandom(1)*90)&(myrandom(1)*90)B(0)]#[SetGuide(gen_noise_branch(radius/100.,freq),L0)&(270)B(0)]#SetGuide(gen_noise_branch(radius/100.,freq),L0)
     produce A(t+1,o)
       

   
S(s,r) :
  produce F(s,r)S(s,r)
  
B(l):
  if l < 14: #Max branch length
    if with_2_branch:
      nproduce I(1,0.01)
      if label:
        nproduce [SetColor(4)&(myrandom(1)*180)S(0.05,0.04)]B(l+1)
      else:
        nproduce [&(myrandom(1)*180)S(0.05,0.04)]B(l+1)
    else:
      produce I(1,0.01)B(l+1)
  else:
    produce *
  	
# Increment radius of internodes
I(s,r) --> I(s,r+radinc)
S(s,r) --> S(s, r+radinc)
_(r) --> _(r+radinc)

homomorphism:

I(a,r) --> F(a,r)
S(a,r) --> F(a,r)

endlsystem
