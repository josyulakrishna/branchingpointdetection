import random as rd
import numpy as np
from openalea.plantgl.all import *#Polyline2D, unitstep, freq
from numpy import arange
from openalea.lpy.parameterset import *
from random import uniform, seed
from math import pi
from helper import *

from openalea.plantgl.scenegraph.cspline import CSpline
def gen_noise_branch3D(radius,nbp=20):
    return  NurbsCurve([(0,0,0,1),(0,0,1/float(nbp-1),1)]+[(myrandom(radius*3),
                                     myrandom(radius*amplitude(pt/float(nbp-1))),
                                     pt/float(nbp-1),1) for pt in range(2,nbp)],
                        degree=min(nbp-1,3),stride=nbp*100)
import copy
#Setup variables
prune = False
label = False
curve_gui = False
#l = LsystemParameters()
#l.add_function('h', NurbsCurve2D([(0,0.1,1),(1/3,1,1),(2/3,1,1),(1,0,1)]))
#Tree growth variables

#Trunk guide variables
L0 = 30
freq = 30
#rd.seed(0)
order = 0
branches = 0
radius = 1
radinc =    0.005 # increment of radius through time

def generate_points():
  x = np.full((7,), 25).astype(float)
  z = np.arange(0, 21, 3).astype(float)
  y = np.full((7,), 0).astype(float)
  pts = []
 # X,Y,Z = np.meshgrid(x,y,z)  
  #a = np.vstack([X.ravel(), Y.ravel(), Z.ravel()]).T
  for i in range(x.shape[0]):
    pts.append(Vector3(-x[i], y[i], z[i]))
    pts.append(Vector3(x[i], y[i], z[i]))
    
    
  return pts

def deflection(d, x, L):
  return (d/2)*(x**2)/(L**3+0.001)*(3*L - x)
  #return d*(1 - np.cos(*np.pi*x/(2*L))) #Axial loading

 
pts = generate_points()
print(pts)
attractor_grid = Point3Grid((1,1,1),pts)
def get_ctrl(target, start, current):
    pts = []
    Lcurve = 10#np.sqrt((start[0]-current[0])**2 + (current[1]-start[1])**2 + (current[2]-start[2])**2)    
    if Lcurve**2 - (target[1]-start[1])**2 - (target[2]-start[2])**2 < 0:
      print("SHORT")
      return pts
    curve_end_x = np.sqrt(Lcurve**2 - (target[1]-start[1])**2 - (target[2]-start[2])**2)
    i_target = [start[0]+target[0]/abs(target[0])*(curve_end_x), target[1], target[2]]
    print(Lcurve, start, current, i_target, target)
    dxyz = np.array(i_target) - np.array(current)
    dx = np.array(current) - np.array(start)
    for i in range(1,1001):
       x = i/1000
       d = deflection(dxyz, x*Lcurve, Lcurve)
       pts.append(tuple((start[0]+x*dx[0]+d[0], start[1]+x*dx[1]+d[1], start[2]+x*dx[2]+d[2])))
       
    dxyz = np.array(target) - np.array(i_target)
    for i in range(1,101):
       x = i/100
       pts.append(tuple([i_target[0] +x*dxyz[0], i_target[1]+x*dxyz[1], i_target[2]+x*dxyz[2]]))
    spline = CSpline(pts)
    return spline.curve()
    
def gen_noise_branch3D(radius,nbp=20):
    return  NurbsCurve([(0,0,0,1),(0,0,1/float(nbp-1),1)]+[(myrandom(radius*3),
                                     myrandom(radius*amplitude(pt/float(nbp-1))),
                                     pt/float(nbp-1),1) for pt in range(2,nbp)],
                        degree=min(nbp-1,3),stride=nbp*100)

class branch():
  def __init__(self, id):
    self.start = Vector3(0,0,0)
    self.end = Vector3(0,0,0)
    self.id = id
    self.last_tie = Vector3(0,0,0)
    self.first_tie = False
    self.guide = []
    self.tied = False
    self.age = 0
    
  def decompose(self):
    self.curr_string = []
    return self.curr_string

def tie_down(lstring):
  global branch_dict, pts
  tied = False
  for j,i in enumerate(lstring):
    if i.name == 'C' and branch_dict[i[0].branch_id].tied == False and i[0].age > 5:
      curve = []
      i[0].tied = True
      branch_dict[i[0].branch_id].tied = True
      print('tying', i[0].branch_id)
      print(pts[i[0].branch_id], branch_dict[i[0].branch_id].last_tie , branch_dict[i[0].branch_id].end)
      curve = get_ctrl(pts[i[0].branch_id], branch_dict[i[0].branch_id].start , branch_dict[i[0].branch_id].end)
      del(lstring[j+1])
      lstring.insertAt(j+1, SetGuide(curve,25))
            
      tied = True      
      break
  if tied == True:
      tie_down(lstring)
      
  return lstring
      

      
#Prune at end of specified iteration according to pruning_strategy
def EndEach(lstring):
  #for i in range(14):
    #branch_dict[i].tied = False
  if getIterationNb()%3 == 0:
    tie_down(lstring)
  
  global prune
  frameDisplay(True)
  if not prune:
    return lstring
  return pruning_strategy(getIterationNb(), lstring) #Overwrite this function
  

branch_dict = {}
for i in range(14):
  branch_dict[i] = branch(i)
  


module A # represent trunk apical meristem
module B # represent apical meristem of lateral branches
module I # Internode
module O
module C # Mark branches
module Attractors

Axiom: AttractorsA(1,0)

derivation length: 50
a = Vector3()

production:
A(t,o) :
  global branches, branch_dict,a
  if t <= 21:
     # simply produces a metamer and ages the apex
     if label:
	     nproduce  SetColor(3)
     nproduce I(1,0.05)
     if t%3 == 0:
       if label:
       	nproduce SetColor(2)
       if curve_gui:
	       branches+=1
	       nproduce [SetGuide(globals()["path_"+str(branches)],L0)&(90)B(0)]
	       branches+=1       
	       nproduce [SetGuide(globals()["path_"+str(branches)],L0)&(270)B(0)]
       else:
          nproduce [C(ParameterSet(branch_id = branches, tied = False, age = 0))&(90)GetPos(branch_dict[branches].start)B(0, branches)GetPos(branch_dict[branches].end)]
          branches+=1
          nproduce [C(ParameterSet(branch_id = branches, tied = False, age = 0))&(270)GetPos(branch_dict[branches].start)B(0, branches)GetPos(branch_dict[branches].end)]
          branches+=1
         
     produce A(t+1,o)
       
C(p):
  global branch_dict
  p.age+=1
  branch_dict[p.branch_id].age+=1
Attractors :
  pttodisplay = attractor_grid.get_enabled_points()
  if len(pttodisplay) > 0:
    produce [,(3) @g(PointSet(pttodisplay,width=20))]

S(s,r) :
  if order == 2:
    if myrandom(0.5)+0.5 < 0.15:
    	nproduce [&(myrandom(1)*180)I(0.5, 0.005)]
  produce F(s,r)S(s,r)
  
B(l, b):
  global branch_dict
  if l < 14: #Max branch length
    if True:
      nproduce I(1,0.001)
      if label:
        nproduce [SetColor(4)&(myrandom(1)*180)S(0.05,0.1)]B(l+1)
      else:
        if order >= 1:
        	nproduce [&(myrandom(1)*180)S(0.05,0.1)]B(l+1)
        else:
          produce B(l+1,b)
    else:
      produce I(0.1,0.01)B(l+1)
  else:
    produce *   	
    
# Increment radius of internodes
I(s,r) --> I(s,r+radinc)
S(s,r) --> S(s, r+radinc)
_(r) --> _(r+radinc)

homomorphism:

I(a,r) --> F(a,r)
S(a,r) --> F(a,r)
 
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.animation_timestep = 0.001
