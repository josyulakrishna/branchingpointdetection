from openalea.plantgl.all import *
from random import uniform, seed
from math import pi
import numpy as np


def amplitude(x): return 1

target = (3,3, 4)
current = (3,14,4)


def get_ctrl(target, current):
    a_1 = []
    a_2 = []
    a_3 = []
    m1 = -5
    m2 = 5
    w = np.array([1,10,1,10])
    target = np.array((list(target)))
    current = np.array((list(current)))
    for j,i in enumerate(target):
      locals()["a_"+str(j+1)].append([i**3, i**2, i, 1])
      locals()["a_"+str(j+1)].append([3*i**2, 2*i, 1, 0])
    for j,i in enumerate(current):
      locals()["a_"+str(j+1)].append([i**3, i**2, i, 1])
      locals()["a_"+str(j+1)].append([3*i**2, 2*i, 1, 0])
    a_1 = np.array(a_1)*np.sqrt(w[:, np.newaxis])
    a_2 = np.array(a_2)*np.sqrt(w[:, np.newaxis])
    a_3 = np.array(a_3)*np.sqrt(w[:, np.newaxis])
    
    b_1 = np.array([0, m1, 0, m2])*np.sqrt(w)
    b_2 = np.array([0, 1, 0, 1])*np.sqrt(w)
    b_3 = np.array([0, 1, 0, 1])*np.sqrt(w)
    x_1 = np.linalg.lstsq(a_1, b_1)[0]
    x_2 = np.linalg.lstsq(a_2, b_2)[0]
    x_3 = np.linalg.lstsq(a_3, b_3)[0]
    print("a",x_1)
    
    lst = []
    curr = np.array([0.,0.,0.])
   
    for i in range(1,10):
      lst.append(tuple(np.array([np.array([curr[0]**3, curr[0]**2, curr[0], 1])@x_1, np.array([curr[1]**3, curr[1]**2, curr[1], 1])@x_2, np.array([curr[2]**3, curr[2]**2, curr[2], 1])@x_3, 1])))
      #lst.append([curr[0], curr[1], curr[2], 1])
      curr = current + (target-current)*i/10
      print(curr)    
    #print(lst)
    return lst      

def myrandom(radius): 
    return uniform(-radius,radius)

def gen_noise_branch(radius,nbp=10):
    global target
    return  NurbsCurve([(0,0,0,1),]+get_ctrl(target, current),
                        degree=min(nbp-1,3),stride=nbp*100)

length = 30
dis = 1.00/unitstep
print (dis)
frq = 100

nbstep = 1 if isAnimationEnabled() else 100
dt = 1/float(nbstep+1)

module Normal

path = gen_noise_branch(radius/100.,freq)
l = path.getLength()

Axiom:  _(0.01)  [,(3) @M(target) @O(0.2)][,(4) @M(current) @O(0.2)]@M(current) Frame(0.1) Normal(0) @g(Scaled(length/l,Translated(Vector3(-path.ctrlPointList[0].x,0,0),path)))[SetGuide(path,length)A(length/dis)]#[ ,(2)-(90)B(freq,length/l)]

derivation length: nbstep
production:

Normal(t) --> Normal(t+dt)

A(x):
    nproduce Normal
    if with_branches:
         bstep = int(x * branch_step / 1000.)
         if bstep < 1: bstep = 1
         print (bstep)
    for i in range(int(x)+0):
       # nproduce F(dis) iRollR(10)
        if with_branches and ((i % bstep) == 0):
            nproduce [+(90) F(dis)]
        if with_frames: 
            nproduce Frame(0.1) 

B(freq,length):
  if with_ticks:
    ul = length/freq
    nproduce @O(ul/5)
    for i in range(int(freq)):
        nproduce F(ul)@O(ul/5)

interpretation:

Normal(t) :
    if not isAnimationEnabled():
        t = show_pos/1000.
    u = path.getArcLengthToUMapping()(t)
    p = path.getPointAt(u)
    p *= length/l
    t = path.getTangentAt(u)
    t.normalize()
    u = path.getNormalAt(u)
    u.normalize()
    produce [ ,(3)MoveTo(p.x,p.z,-p.y) SetHead(t.x,t.z,-t.y,u.x,u.z,-u.y) Frame(0.15) @O(0.05) ]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.animation_timestep = 0.001
	scalars = [('radius', 'Integer', 14, 1, 100), ('freq', 'Integer', 33, 3, 100), ('unitstep', 'Integer', 1, 1, 1000), ('with_ticks', 'Bool', True), ('show_pos', 'Integer', 347, 0, 1000), ('with_frames', 'Bool', True), ('with_branches', 'Bool', False), ('branch_step', 'Integer', 1, 1, 1000)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	amplitude = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.00398406, 1),(0.135147, 1.09012, 1),(0.255548, 1.10149, 1),(0.462358, -0.133011, 1),(0.575864, 0.0540148, 1),(0.666072, 0.994762, 1),(0.857973, 1.00619, 1),(1, 0, 1)]) , 
	    )
	amplitude.name = "amplitude"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': False},[('Function',amplitude)])
	parameterset = [panel_0,]
	context["__functions__"] = [('amplitude',amplitude),]
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["amplitude"] = pgl.QuantisedFunction(amplitude)
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	context.animation_timestep = 0.001
